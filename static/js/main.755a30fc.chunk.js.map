{"version":3,"sources":["redux/actions/index.js","pages/Login.js","components/Header.js","components/WalletForm.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","redux/reducers/user.js","redux/reducers/wallet.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["userForm","userWallet","deleteButton","editButton","saveWallet","saveNewWallet","saveWallets","obj","data","type","payload","exchangeRates","buttonDelete","id","buttonEdit","Login","handleChange","target","name","value","setState","handleSubmit","props","userDispatch","history","state","push","email","password","this","className","htmlFor","placeholder","onChange","onClick","disabled","test","length","React","Component","connect","dispatch","actionsUser","Header","userEmail","userCoin","reduce","acc","curr","Number","currency","ask","toFixed","user","wallet","expenses","WalletForm","fetch","response","json","USDT","coins","Object","keys","currencies","editor","description","method","tag","getInfos","saveButton","map","cur","key","Table","handleDelete","handleEdit","coin","Wallet","clean","saveExpense","result","assign","editExpense","idToEdit","find","newWallet","index","findIndex","expense","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","filter","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.755a30fc.chunk.js","sourcesContent":["export const userForm = 'userForm';\nexport const userWallet = 'userWallet';\nexport const userWalletDados = 'userWalletDados';\nexport const deleteButton = 'deleteButton';\nexport const editButton = 'editButton';\nexport const saveWallet = 'saveWallet';\nexport const saveNewWallet = 'saveNewWallet';\n\nexport const actionsUser = (payload) => ({\n  type: userForm,\n  payload,\n});\n\nexport const actionsWallet = (payload) => ({\n  type: userWallet,\n  payload,\n});\n\nexport function getCoins() {\n  return async (dispatch) => {\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const data = await response.json();\n    delete data.USDT;\n    const coins = Object.keys(data);\n    dispatch(actionsWallet(coins));\n  };\n}\n\nconst saveWallets = (obj, data) => ({\n  type: saveWallet,\n  payload: { ...data, exchangeRates: obj },\n});\n\nexport function saveCoins(data) {\n  return async (dispatch) => {\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const json = await response.json();\n    delete data.USDT;\n    return dispatch(saveWallets(json, data));\n  };\n}\n\nexport const buttonDelete = (id) => ({\n  type: deleteButton,\n  payload: id,\n});\n\nexport const buttonEdit = (id) => ({\n  type: editButton,\n  payload: id,\n});\n\nexport const editedExpense = (payload) => ({\n  type: saveNewWallet,\n  payload,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionsUser } from '../redux/actions';\nimport '../styles/page/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n    };\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState(() => ({ [name]: value }));\n  };\n\n  handleSubmit = () => {\n    const { userDispatch, history } = this.props;\n    userDispatch({ ...this.state });\n    history.push('/carteira');\n  };\n\n  render() {\n    const { email, password } = this.state;\n    const passwordMin = 6;\n    return (\n      <div className=\"login-container\">\n        <div className=\"login-container-title\">Wallet</div>\n        <form className=\"login-container-form\">\n          <label htmlFor=\"email\">\n            Login\n            <input\n              data-testid=\"email-input\"\n              id=\"email\"\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Escreva seu email aqui\"\n              value={ email }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"password\">\n            Senha\n            <input\n              data-testid=\"password-input\"\n              id=\"password\"\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Escreva sua senha aqui\"\n              value={ password }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <button\n            type=\"button\"\n            onClick={ this.handleSubmit }\n            disabled={ !/\\S+@\\S+\\.\\S+/.test(email) || password.length < passwordMin }\n          >\n            Entrar\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  userDispatch: (payload) => dispatch(actionsUser(payload)),\n});\n\nLogin.propTypes = {\n  userDispatch: PropTypes.func,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/components/Header.css';\n\nclass Header extends Component {\n  render() {\n    const { userEmail, userCoin } = this.props;\n    return (\n      <header className=\"header-container-form\">\n        <p data-testid=\"email-field\">{`Email: ${userEmail}`}</p>\n        <div className=\"header-container-form-field\">\n          <p>\n            Despesa Total:\n          </p>\n          <p\n            data-testid=\"total-field\"\n          >\n            {\n              userCoin.reduce((acc, curr) => (\n                acc + Number(curr.value) * Number(curr.exchangeRates[curr.currency].ask)),\n              0).toFixed(2)\n            }\n          </p>\n          <p data-testid=\"header-currency-field\">BRL</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  userCoin: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  userEmail: PropTypes.string,\n  userCoin: PropTypes.arrayOf(Object),\n}.isRequired;\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getCoins } from '../redux/actions';\nimport '../styles/components/WalletForm.css';\n\nclass WalletForm extends Component {\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(getCoins());\n  }\n\n  render() {\n    const {\n      currencies,\n      expenses,\n      editor,\n      value,\n      description,\n      method,\n      tag,\n      currency,\n      getInfos,\n      saveButton,\n      editButton,\n    } = this.props;\n    return (\n      <form className=\"walletForm-container-form\">\n        <label htmlFor=\"value\">\n          Valor:\n          <input\n            data-testid=\"value-input\"\n            type=\"number\"\n            id=\"value\"\n            name=\"value\"\n            value={ value }\n            onChange={ getInfos }\n          />\n        </label>\n        <label htmlFor=\"currency\">\n          Moeda:\n          <select\n            type=\"select\"\n            name=\"currency\"\n            id=\"currency\"\n            data-testid=\"currency-input\"\n            value={ currency }\n            onChange={ getInfos }\n          >\n            {currencies.map((cur) => <option key={ cur } value={ cur }>{cur}</option>)}\n          </select>\n        </label>\n        <label htmlFor=\"method\">\n          Tipo de Pagamento:\n          <select\n            type=\"select\"\n            name=\"method\"\n            id=\"method\"\n            data-testid=\"method-input\"\n            value={ method }\n            onChange={ getInfos }\n          >\n            <option>Dinheiro</option>\n            <option>Cartão de crédito</option>\n            <option>Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Categoria:\n          <select\n            type=\"tag\"\n            name=\"tag\"\n            id=\"tag\"\n            data-testid=\"tag-input\"\n            value={ tag }\n            onChange={ getInfos }\n          >\n            <option>Alimentação</option>\n            <option>Lazer</option>\n            <option>Trabalho</option>\n            <option>Transporte</option>\n            <option>Saúde</option>\n          </select>\n        </label>\n        <label htmlFor=\"description\">\n          Descrição:\n          <input\n            data-testid=\"description-input\"\n            type=\"text\"\n            id=\"description\"\n            name=\"description\"\n            value={ description }\n            onChange={ getInfos }\n          />\n        </label>\n        <button\n          type=\"button\"\n          data-testid=\"save-expense-button\"\n          disabled={ (!value || !description) }\n          onClick={ () => {\n            if (editor) {\n              editButton();\n            } else {\n              saveButton(expenses);\n            }\n          } }\n        >\n          {editor ? 'Editar despesa' : 'Adicionar despesa'}\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  editor: state.wallet.editor,\n});\n\nWalletForm.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  editor: PropTypes.bool.isRequired,\n  value: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  method: PropTypes.string.isRequired,\n  tag: PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n  getInfos: PropTypes.func.isRequired,\n  saveButton: PropTypes.func.isRequired,\n  editButton: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps)(WalletForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { buttonDelete, buttonEdit } from '../redux/actions';\nimport '../styles/components/Table.css';\n\nclass Table extends Component {\n  handleDelete = (id) => {\n    const { dispatch } = this.props;\n    dispatch(buttonDelete(id));\n  };\n\n  handleEdit = (id) => {\n    const { dispatch, editButton } = this.props;\n    dispatch(buttonEdit(id));\n    editButton(id);\n  };\n\n  render() {\n    const { userCoin } = this.props;\n    return (\n      <div className=\"table-container\">\n        <table>\n          <thead>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              userCoin.map((coin) => (\n                <tr key={ coin.id }>\n                  <td>{coin.description}</td>\n                  <td>{coin.tag}</td>\n                  <td>{coin.method}</td>\n                  <td>{Number(coin.value).toFixed(2)}</td>\n                  <td>{coin.exchangeRates[coin.currency].name}</td>\n                  <td>\n                    {Number(coin.exchangeRates[coin.currency].ask)\n                      .toFixed(2)}\n                  </td>\n                  <td>\n                    {\n                      (coin.exchangeRates[coin.currency]\n                        .ask * Number(coin.value)).toFixed(2)\n                    }\n                  </td>\n                  <td>Real</td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      data-testid=\"edit-btn\"\n                      onClick={ () => {\n                        this.handleEdit(coin.id);\n                      } }\n                    >\n                      Editar\n                    </button>\n                    <button\n                      type=\"button\"\n                      data-testid=\"delete-btn\"\n                      onClick={ () => {\n                        this.handleDelete(coin.id);\n                      } }\n                    >\n                      Excluir\n                    </button>\n                  </td>\n                </tr>\n              ))\n            }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  userCoin: state.wallet.expenses,\n});\n\nTable.propTypes = {\n  userCoin: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  editButton: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport WalletForm from '../components/WalletForm';\nimport Table from '../components/Table';\nimport { saveCoins, editedExpense } from '../redux/actions';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n      description: '',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      currency: 'USD',\n    };\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState(() => ({ [name]: value }));\n  };\n\n  clean = () => {\n    this.setState({\n      value: '',\n      description: '',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      currency: 'USD',\n    });\n  };\n\n  saveExpense = (expenses) => {\n    const { dispatch } = this.props;\n    const result = { id: expenses.length };\n    Object.assign(result, this.state);\n    dispatch(saveCoins(result));\n    this.clean();\n  };\n\n  editExpense = (idToEdit) => {\n    const { expenses } = this.props;\n    const result = expenses.find(({ id }) => id === idToEdit);\n    const { value, description, method, tag, currency } = result;\n    this.setState({\n      value,\n      description,\n      method,\n      tag,\n      currency,\n    });\n  };\n\n  newWallet = () => {\n    const { dispatch, idToEdit, expenses } = this.props;\n    const { value, description, method, tag, currency } = this.state;\n\n    const index = expenses.findIndex((expense) => expense.id === idToEdit);\n    const result = [...expenses];\n    result[index].value = value;\n    result[index].description = description;\n    result[index].method = method;\n    result[index].tag = tag;\n    result[index].currency = currency;\n\n    dispatch(editedExpense(result));\n    this.clean();\n  };\n\n  render() {\n    const { value, description, method, tag, currency } = this.state;\n    return (\n      <div>\n        <Header />\n        <WalletForm\n          value={ value }\n          description={ description }\n          method={ method }\n          tag={ tag }\n          currency={ currency }\n          getInfos={ this.handleChange }\n          saveButton={ this.saveExpense }\n          editButton={ this.newWallet }\n        />\n        <Table\n          editButton={ this.editExpense }\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  idToEdit: state.wallet.idToEdit,\n  expenses: state.wallet.expenses,\n});\n\nWallet.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  idToEdit: PropTypes.number.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape).isRequired,\n};\n\nexport default connect(mapStateToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch, HashRouter } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { userForm } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case userForm:\n    return action.payload;\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","import { deleteButton, editButton,\n  userWallet, saveNewWallet, saveWallet } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  editor: false,\n  idToEdit: 0,\n};\n\nfunction wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case userWallet:\n    return {\n      ...state,\n      currencies: action.payload,\n    };\n  case saveWallet:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.payload],\n      editor: false,\n      idToEdit: 0,\n    };\n  case deleteButton:\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => (\n        Number(expense.id) !== Number(action.payload)\n      )),\n    };\n  case editButton:\n    return {\n      ...state,\n      editor: true,\n      idToEdit: action.payload,\n    };\n  case saveNewWallet:\n    return {\n      ...state,\n      expenses: action.payload,\n      editor: false,\n      idToEdit: 0,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst reducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}